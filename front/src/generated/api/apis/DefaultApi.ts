/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  SettingsApiResponse,
  TaskResultPage,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    SettingsApiResponseFromJSON,
    SettingsApiResponseToJSON,
    TaskResultPageFromJSON,
    TaskResultPageToJSON,
} from '../models/index';

export interface CloneAndSendCloneAndSendIdPostRequest {
    id: any;
}

export interface TaskResultPageResultsPageGetRequest {
    n?: any;
    size?: any;
    sort?: any;
    search?: any;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Clone la tâche et la renvoie sur le broker
     * Clone And Send
     */
    async cloneAndSendCloneAndSendIdPostRaw(requestParameters: CloneAndSendCloneAndSendIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cloneAndSendCloneAndSendIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clone_and_send/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Clone la tâche et la renvoie sur le broker
     * Clone And Send
     */
    async cloneAndSendCloneAndSendIdPost(requestParameters: CloneAndSendCloneAndSendIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.cloneAndSendCloneAndSendIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Info
     */
    async infoInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SettingsApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsApiResponseFromJSON(jsonValue));
    }

    /**
     * Info
     */
    async infoInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SettingsApiResponse> {
        const response = await this.infoInfoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Task Result Page
     */
    async taskResultPageResultsPageGetRaw(requestParameters: TaskResultPageResultsPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskResultPage>> {
        const queryParameters: any = {};

        if (requestParameters.n !== undefined) {
            queryParameters['n'] = requestParameters.n;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/results/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskResultPageFromJSON(jsonValue));
    }

    /**
     * Task Result Page
     */
    async taskResultPageResultsPageGet(requestParameters: TaskResultPageResultsPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskResultPage> {
        const response = await this.taskResultPageResultsPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
